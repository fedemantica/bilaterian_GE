###### config ##############
configfile: "config.yaml"

###### paths ###############
DATA = config["general_paths"]["data"]
SRC = config["general_paths"]["src"]
CONDA_ENVS = config["general_paths"]["conda_envs"]
GO_RAW_FILES = config["paths"]["GO_raw_files"]
GO_TRANSFERS = config["paths"]["GO_transfers"]
ORTHOGROUPS_DIR = config["paths"]["orthogroups_dir"]
CLUEGO_DIR = config["paths"]["clueGO_dir"]

######## tools ############
RETRIEVE_ENSEMBL_IDS = config["tools"]["retrieve_ensembl_IDs"]
GET_CLUEGO_ANNOT = config["tools"]["get_cluego_annot"]

###### variables ###########
MY_VERSION = config["variables"]["my_version"]
CLUEGO_CAT = config["variables"]["cluego_cat"]
  
###### targets ##########
ALL_TRANSLATED_IDS = expand("{path}/goa_hg38-all_translated.tab", path=GO_RAW_FILES)
ALL_TRANSLATED_IDS_ENS_ADDED = expand("{path}/{my_version}/goa_hg38-all_translated-ensembl_added.tab", path=GO_TRANSFERS, my_version=MY_VERSION)
CLUEGO_TRANSFER_INPUT = CLUEGO_DIR+"/hg38_GO_annotations-ClueGO-joint.txt"
CLUEGO_TRANSFER_INPUT_LEVELED = expand("{path}/hg38_GO_annotations-ClueGO-leveled-level{level}.txt", path=CLUEGO_DIR, level=list(range(0,17)))

####### rules ############
rule all:
	input:
		ALL_TRANSLATED_IDS,
		ALL_TRANSLATED_IDS_ENS_ADDED,
		CLUEGO_TRANSFER_INPUT,
		CLUEGO_TRANSFER_INPUT_LEVELED

####################################
###### GOA ANNOTATION ##############
####################################

#I don't like the Ensembl GO annotation, so I am going straight back to the original GOA.
#rule generate_transfers_input:
#	input:
#		goa_annot = GO_RAW_FILES+"/goa_hg38.gaf.gz",
#		IDs_key = GO_RAW_FILES+"/Ensembl-UniProtKB_dict.v104.txt"
#	output:
#		GO_RAW_FILES+"/goa_hg38-Ensembl_translated.tab"
#	shell:
#		"""
#		zcat {input.goa_annot} | grep -v "\!" | cut -f2,5 | translate -a -n -d -j -v -e "NA" <(cat {input.IDs_key}) 1 > {output}
#		"""
#
##Some UniprotID can't be translated starting from the Ensembl-provided keys.
##I am using the ID mapper provided by Uniprot.
#rule add_untranslated_ID:
#	input:
#		ensembl_translated = GO_RAW_FILES+"/goa_hg38-Ensembl_translated.tab",
#		goa_annot = GO_RAW_FILES+"/goa_hg38.gaf.gz"
#	output:
#		uniprot_translated = GO_RAW_FILES+"/goa_hg38-uniprot_translated.tab",
#		missing = GO_RAW_FILES+"/goa_hg38-missing_translated.txt",
#		all_translated = GO_RAW_FILES+"/goa_hg38-all_translated.tab"
#	shell:
#		"""
#		cat {input} | awk '$2=="NA"' | cut -f1 | sort | uniq > missing_IDs.tmp; \
#		python {RETRIEVE_ENSEMBL_IDS} -i missing_IDs.tmp -o {output.uniprot_translated} -m {output.missing}; \
#		cat <(cat {input} | awk '$2!="NA"') <(cat {output.uniprot_translated} | tail -n+2 | awk '$1!=""' \
#							| translate -a -d -j <(zcat {input.goa_annot} | awk '$1!~"!"' | cut -f2,5) 1 \
#							| awk -v OFS="\t" '{{print $1,$3,$2}}') \
#		> {output.all_translated}; \
#		rm missing_IDs.tmp 
#		"""
#
##For the genes present in my broccoli gene orthogroups for which GOA does not have an annotation (but somehow Ensembl does)
##I am adding the GO annotation from the Ensembl downloaded relationships
#rule add_Ensembl_annotation:
#	input:
#		orthogroups = ORTHOGROUPS_DIR+"{my_version}/corrected_orthogroups-filtered.txt", 
#		all_translated = GO_RAW_FILES+"/goa_hg38-all_translated.tab",
#		ensembl_annot = GO_RAW_FILES+"/hg38_GO_annotations-Ensembl104.txt"
#	output:
#		GO_TRANSFERS+"{my_version}/goa_hg38-all_translated-ensembl_added.tab"
#	shell:
#		"""
#		cat {input.orthogroups} | awk '$2=="Hs2" {{print $3}}' | sort | uniq | filter_1col -v 1 <(cat {input.all_translated} | cut -f2 | grep ENS | sort | uniq) \
#		| translate -a -k -d -j <(cat {input.ensembl_annot} | cut -f1,2) 1 | awk -v OFS="\t" '{{print $1"_fake",$1,$2}}' > ensembl_added.tmp; \
#		cat {input.all_translated} ensembl_added.tmp | grep ENS > {output}; \
#		rm ensembl_added.tmp;
#		"""

####################################
###### CLUEGO ANNOTATION ###########
####################################

rule generate_ClueGO_transfer_inputs:
	input:
		annot = CLUEGO_DIR+"/Homo_Sapiens_GO_{clueGO_cat}-EBI-UniProt-GOA_27.02.2019_00h00.txt.gz",
		key = CLUEGO_DIR+"/Homo_Sapiens.gene2ensembl_2019.02.27.txt.gz"
	output:
		joint = CLUEGO_DIR+"/hg38_{clueGO_cat}_out-joint.tab",
		leveled = CLUEGO_DIR+"/hg38_{clueGO_cat}_out-leveled.tab"
	shell:
		"""
		python {GET_CLUEGO_ANNOT} -i {input.annot} -k {input.key} -o {output.joint} -ol {output.leveled}
		"""

rule join_ClueGO_transfer_input:
	input:
		expand("{path}/hg38_{clueGO_cat}_out-{{clueGO_type}}.tab", path=CLUEGO_DIR, clueGO_cat=CLUEGO_CAT)
	output:
		CLUEGO_DIR+"/hg38_GO_annotations-ClueGO-{clueGO_type}.txt"
	shell:
		"""
		cat {input} > {output}
		"""

rule filter_ClueGO_transfer_input_by_level:
	input:
		expand("{path}/hg38_{clueGO_cat}_out-leveled.tab", path=CLUEGO_DIR, clueGO_cat=CLUEGO_CAT)
	output:
		CLUEGO_DIR+"/hg38_GO_annotations-ClueGO-leveled-level{level}.txt"
	shell:
		"""
		cat {input} | awk '$NF=="{wildcards.level}"' | cut -f1,2,3 > {output}
		"""

####################################
######  JOIN ANNOTATIONS ###########
####################################

#Join Ensembl and ClueGO annotations

rule join_Ensembl_ClueGO_annotations:
	input:
	output:
	shell:
		"""
		"""
cat hg38_GO_annotations-ClueGO-leveled-level5.txt hg38_GO_annotations-Ensembl102.txt | sort | uniq > hg38_GO_annotations-Ensembl102_clueGOLevel5.tab


####################################
######  TRANSFER GOS ###############
####################################
rule transfer_GO:
	input:
		gene_orthogroups = EXON_ORTHOLOGY+"/gene_cluster_file.gz",
		GO_file = GO_ENRICHMENTS+"/{species}_GO_annotations-Ensembl102_clueGOLevel5-BP.tab"
		#GO_file = GO_ENRICHMENTS+"/{species}_GO_annotations-Ensembl102.txt"
	output:
		GO_ENRICHMENTS+"/parsed_orthogroups-transferred_GO_from_{species}.txt"
	shell:
		"""
		zcat {input.gene_orthogroups} > gene_cluster_file.tab; \
		python {TRANSFER_GO} 	-o gene_cluster_file.tab \
					--GO_file {input.GO_file} \
					--species_query {wildcards.species} \
					--cutoff 4 \
					--output_file {output}; \
		rm gene_cluster_file.tab
		"""

rule GO_annot_by_species:
	input:
		GO_ENRICHMENTS+"/parsed_orthogroups-transferred_GO_from_hg38.txt"
	output:
		GO_ENRICHMENTS+"/GO_annot/{species}-transferred_GO.txt"
	shell:
		"""
		cat {input} | awk -v OFS="\t" '$2=="{wildcards.species}" && $4!="NA" {{print $3,$4,$5}}' > {output}
		"""

#Generate reduced annotations to avoid testing categories with a crazy number of genes
#That just increases the number of tests and kills all my pvalues.

#First, get the number of genes in each species annotated as belonging the each GO (following the transfer)
rule count_genes_in_GOs:
	input:
		GO_ENRICHMENTS+"/GO_annot/{species}-transferred_GO.txt"
	output:
		GO_ENRICHMENTS+"/GO_annot/{species}-genes_in_GO_counts.txt"
	run:
		import pandas as pd
		input_df = pd.read_table(str(input), sep="\t", index_col=False, header=None, names=["geneID", "GOterm", "GOdef"])
		grouped_df = input_df.groupby("GOterm")
		final_df = pd.DataFrame()
		for term, group in grouped_df:
		  count = group.shape[0]
		  final_df = pd.concat([final_df, pd.DataFrame({"GO" : [term], "count" : [count]})])
		final_df.to_csv(str(output), sep="\t", index=False, header=True, na_rep="NA")

rule reduce_species_GO_annot:
	input:
		annot = GO_ENRICHMENTS+"/GO_annot/{species}-transferred_GO.txt",
		GO_counts = GO_ENRICHMENTS+"/GO_annot/{species}-genes_in_GO_counts.txt"
	output:
		GO_ENRICHMENTS+"/GO_annot/{species}-transferred_GO-reduced.txt"
	shell:
		"""
		cat {input.annot} | filter_1col 2 <(cat {input.GO_counts} | awk '$2<={HIGHER_GO_CUTOFF} && $2>={LOWER_GO_CUTOFF} {{print $1}}') > {output}
		"""

