configfile: "config.yaml"

###### paths ###############
DATA = config["general_paths"]["data"]
SRC = config["general_paths"]["src"]
CONDA_ENVS = config["general_paths"]["conda_envs"]
METADATA = config["paths"]["metadata"]
GENE_SETS_DIR = config["paths"]["gene_sets_dir"]
METASAMPLES_DIR = config["paths"]["metasamples_dir"]
AVERAGE_EXPR_DIR = config["paths"]["average_expr_dir"]
PCA_ANALYSIS_DIR = config["paths"]["pca_analysis"]
SPLSDA_ANALYSIS_DIR = config["paths"]["splsda_analysis"]

######## tools ############
FINE_TUNE_SPLSDA = config["tools"]["fine_tune_splsda"]
FINE_TUNE_SPLSDA_CLADE_TISSUE = config["tools"]["fine_tune_splsda_clade_tissue"]
FINE_TUNE_SPLSDA_CLADE_TISSUE_1BY1 = config["tools"]["fine_tune_splsda_clade_tissue_1by1"]
GET_GTM_FILES = config["tools"]["get_gtm_files"]
RUN_GPROFILER2 = config["tools"]["run_gprofiler2"]

###### variables ###########
MY_VERSION = config["variables"]["my_version"]
ALL_SPECIES = config["variables"]["all_species"]
BILATERIA = ALL_SPECIES
VERTEBRATA = config["variables"]["vertebrata"]
INSECTA = config["variables"]["insecta"]
DEUTEROSTOMA = config["variables"]["deuterostoma"]
PROTOSTOMA = config["variables"]["protostoma"]
CLADES = config["variables"]["clades"]

CLADE_SPECIES_DICT = {}
CLADE_SPECIES_DICT["Vertebrata"] = VERTEBRATA
CLADE_SPECIES_DICT["Insecta"] = INSECTA
CLADE_SPECIES_DICT["Bilateria"] = BILATERIA

CATEGORIES = config["variables"]["categories"]
EVO_TYPES = config["variables"]["evo_types"]
EXPR_TYPES = config["variables"]["expr_types"]
ALL_TISSUES = config["variables"]["all_tissues"]

HIGHER_GO_CUTOFF = config["variables"]["higher_GO_cutoff"]
LOWER_GO_CUTOFF =  config["variables"]["lower_GO_cutoff"]

###### targets ##########
FINE_TUNED_SPLSDA = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}-tuned_sPLSDA.RDATA", path=SPLSDA_ANALYSIS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade=CLADES, evo_type=EVO_TYPES, expr_type=["metasamples"])
FINE_TUNED_SPLSDA_CLADE_TISSUE = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}-tuned_sPLSDA-clade_tissue.RDATA", path=SPLSDA_ANALYSIS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade="Bilateria", evo_type="conserved", expr_type=["metasamples"])
FINE_TUNED_SPLSDA_CLADE_TISSUE_1BY1 = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}-tuned_sPLSDA-clade_tissue-{tissue}.RDATA", path=SPLSDA_ANALYSIS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade="Bilateria", evo_type="conserved", expr_type=["metasamples"], tissue=ALL_TISSUES)

LOADINGS_GENEID_TISSUE_ALL = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/loadings/Positive_PC{num}_loadings_all_geneID.txt", path=SPLSDA_ANALYSIS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade="Bilateria", evo_type="conserved", num=list(range(1,9)))
LOADINGS_GENEID_TISSUE_1BY1 = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/Vertebrata_PC2_loadings_all_geneID.txt", path=SPLSDA_ANALYSIS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade="Bilateria", evo_type="conserved", tissue=ALL_TISSUES)
GO_ENRICHMENTS_ALL = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/loadings/GO_enrichments/{sign}_PC{num}-GO_res.tab", path=SPLSDA_ANALYSIS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade="Bilateria", evo_type="conserved", sign=["Positive", "Negative"], num=list(range(1,9)))
GO_ENRICHMENTS_1BY1 = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/GO_enrichments/{subclade}_PC2-GO_res.tab", path=SPLSDA_ANALYSIS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade="Bilateria", evo_type="conserved", tissue=ALL_TISSUES, subclade=["Vertebrata", "Insecta"])


####### rules ############
rule all:	
	input:
		FINE_TUNED_SPLSDA,
		#FINE_TUNED_SPLSDA_CLADE_TISSUE,
		FINE_TUNED_SPLSDA_CLADE_TISSUE_1BY1
		#LOADINGS_GENEID_TISSUE_ALL,
		#LOADINGS_GENEID_TISSUE_1BY1,
		#GO_ENRICHMENTS_ALL,
		#GO_ENRICHMENTS_1BY1
	
#######################################
###### sPLS-DA FINE TUNING ############
#######################################

rule fine_tune_sPLSDA:
	input:
		expr_table = PCA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}_expression-BH_genes-NORM.tab",
		metadata = expand("{path}/{species}_samples_info.tab", path=METADATA, species=ALL_SPECIES)
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}-tuned_sPLSDA.RDATA"
	params:
		clade_species = lambda wildcards: ",".join(CLADE_SPECIES_DICT[wildcards.clade])
	conda:
		CONDA_ENVS+"/r_env.yml"	
	shell:
		"""
		Rscript {FINE_TUNE_SPLSDA} {input.expr_table} {METADATA} {params.clade_species} {output} 
		"""

#In this rule I select the variables (genes) separating the tissues in the different clades (Vertebrate_Neural, Insecta_Neural, Others_Neural)
#rule fine_tune_sPLSDA_clade_tissue:
#	input:
#		expr_table = PCA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}_expression-BH_genes-NORM.tab",
#		metadata = expand("{path}/{species}_samples_info.tab", path=METADATA, species=ALL_SPECIES)
#	output:
#		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}-tuned_sPLSDA-clade_tissue.RDATA"
#	params:
#		clade_species = lambda wildcards: ",".join(CLADE_SPECIES_DICT[wildcards.clade])
#	conda:
#		CONDA_ENVS+"/r_env.yml"	
#	shell:
#		"""
#		Rscript {FINE_TUNE_SPLSDA_CLADE_TISSUE} {input.expr_table} {METADATA} {params.clade_species} {output} 
#		"""

#Here it's the same as the previous rule, but simplifying the groups
rule fine_tune_sPLSDA_clade_tissue_1by1:
	input:
		expr_table = PCA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}_expression-BH_genes-NORM.tab",
		metadata = expand("{path}/{species}_samples_info.tab", path=METADATA, species=ALL_SPECIES)
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-{expr_type}-tuned_sPLSDA-clade_tissue-{tissue}.RDATA"
	params:
		clade_species = lambda wildcards: ",".join(CLADE_SPECIES_DICT[wildcards.clade])
	conda:
		CONDA_ENVS+"/r_env.yml"	
	shell:
		"""
		Rscript {FINE_TUNE_SPLSDA_CLADE_TISSUE_1BY1} {input.expr_table} {METADATA} {params.clade_species} {wildcards.tissue} {output} 
		"""

#######################################
###### Get loadgins ###################
#######################################
#Isolate loading genes from different runs.
#This will work after I run the Rmarkdown.
#I use PC2, which is the one separating Vertebrate samples (loadings < 0) from Insect samples (loadings > 0) for each of the tissues
rule get_loadings_geneIDs_ALL:
	input:
		loadings = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings/PC{num}_loadings.txt",
		orthogroups = GENE_SETS_DIR+"/{my_version}/{category}/{clade}/conserved/{clade}_conserved-reclustered_orthogroups-BH_genes.txt"
	output:
		human_vertebrata = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings/Negative_PC{num}_loadings_Hs2_geneID.txt",
		human_insecta = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings/Positive_PC{num}_loadings_Hs2_geneID.txt",
		all_vertebrata = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings/Negative_PC{num}_loadings_all_geneID.txt",
		all_insecta = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings/Positive_PC{num}_loadings_all_geneID.txt"
	shell:	
		"""
		cat {input.loadings} | awk '$2<0'       | translate -k <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 | cut -f1 > {output.human_vertebrata}; \
		cat {input.loadings} | awk '$2>0'       | translate -k <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 | cut -f1 > {output.human_insecta}; \
		cat {input.loadings} | awk '$2<0' 	| translate -a -v -e NA <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 \
							| translate -a -r -v -e NA <(cat {input.orthogroups} | grep Dme | cut -f1,3) 1 | cut -f1,2,4 > {output.all_vertebrata}; \
		cat {input.loadings} | awk '$2>0'	| translate -a -v -e NA <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 \
							| translate -a -r -v -e NA <(cat {input.orthogroups} | grep Dme | cut -f1,3) 1 | cut -f1,2,4 > {output.all_insecta}
		"""

rule get_loadings_geneIDs_1by1:
	input:
		loadings = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/PC2_loadings.txt",
		orthogroups = GENE_SETS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-reclustered_orthogroups-BH_genes.txt"
	output:
		human_vertebrata = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/Vertebrata_PC2_loadings_Hs2_geneID.txt",
		human_insecta = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/Insecta_PC2_loadings_Hs2_geneID.txt",
		all_vertebrata = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/Vertebrata_PC2_loadings_all_geneID.txt",
		all_insecta = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/Insecta_PC2_loadings_all_geneID.txt"
	shell:	
		"""
		cat {input.loadings} | awk '$2<0'       | translate -k <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 | cut -f1 > {output.human_vertebrata}; \
		cat {input.loadings} | awk '$2>0'       | translate -k <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 | cut -f1 > {output.human_insecta}; \
		cat {input.loadings} | awk '$2<0' 	| translate -a -v -e NA <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 \
							| translate -a -r -v -e NA <(cat {input.orthogroups} | grep Dme | cut -f1,3) 1 | cut -f1,2,4 > {output.all_vertebrata}; \
		cat {input.loadings} | awk '$2>0'	| translate -a -v -e NA <(cat {input.orthogroups} | grep Hs2 | cut -f1,3) 1 \
							| translate -a -r -v -e NA <(cat {input.orthogroups} | grep Dme | cut -f1,3) 1 | cut -f1,2,4 > {output.all_insecta}
		"""

#######################################
###### GO enrichments #################
#######################################
#These are files necessary to use the custom annotation in gprofiler2 in R
#For now it is just to try, but things will have to be homogenize
rule get_GO_annotations:
	input:
		"/users/mirimia/fmantica/projects/ludo_analysis/data/GO_enrichments/hg38_GO_annotations-Ensembl102_clueGOLevel5.tab"
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annotations-Ensembl102_clueGOLevel5.tab"
	shell:
		"""
		cat {input} | sed "s/ /_/g; s/'//g; s///" | cut -f1-3 > {output}
		"""

rule count_genes_in_GOs:
	input:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annotations-Ensembl102_clueGOLevel5.tab"
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/genes_in_GO_counts.txt"
	run:
		import pandas as pd
		input_df = pd.read_table(str(input), sep="\t", index_col=False, header=None, names=["geneID", "GOterm", "GOdef"])
		grouped_df = input_df.groupby("GOterm")
		final_df = pd.DataFrame()
		for term, group in grouped_df:
		  count = group.shape[0]
		  final_df = pd.concat([final_df, pd.DataFrame({"GO" : [term], "count" : [count]})])
		final_df.to_csv(str(output), sep="\t", index=False, header=True, na_rep="NA")

rule reduce_GO_annotations:
	input:
		annot = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annotations-Ensembl102_clueGOLevel5.tab",
		GO_counts = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/genes_in_GO_counts.txt"
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annotations-Ensembl102_clueGOLevel5-reduced.tab"
	shell:
		"""
		cat {input.annot} | filter_1col 2 <(cat {input.GO_counts} | awk '$2<={HIGHER_GO_CUTOFF} && $2>={LOWER_GO_CUTOFF} {{print $1}}') > {output}
		"""

rule generate_gmt_files:
	input:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annotations-Ensembl102_clueGOLevel5-reduced.tab"
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annot-reduced.gmt"
	shell:
		"""
		python {GET_GTM_FILES} -GO {input} -o {output}
		"""

rule get_background:
	input:
		GENE_SETS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-reclustered_orthogroups-BH_genes.txt"
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/{clade}_{evo_type}-GO_background.txt"
	shell:
		"""
		cat {input} | grep Hs2 | cut -f3 > {output}
		"""

#you need gprofiler2 installed for this. I am creating a conda env
rule GO_enrichment_gprofiler2_ALL:
	input:
		gene_set = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings/{sign}_PC{num}_loadings_Hs2_geneID.txt",
		background = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/{clade}_{evo_type}-GO_background.txt",
		annot = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annot-reduced.gmt"
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings/GO_enrichments/{sign}_PC{num}-GO_res.tab"
	conda:
		CONDA_ENVS+"/R3.6_env.yml"
	shell:
		"""
		Rscript {RUN_GPROFILER2} {input.gene_set} {input.background} {input.annot} {output}
		"""

rule GO_enrichment_gprofiler2_1by1:
	input:
		gene_set = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/{subclade}_PC2_loadings_Hs2_geneID.txt",
		background = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/{clade}_{evo_type}-GO_background.txt",
		annot = SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/GO_files/hg38_GO_annot-reduced.gmt"
	output:
		SPLSDA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/loadings_clade_tissue/{tissue}/GO_enrichments/{subclade}_PC2-GO_res.tab"
	conda:
		CONDA_ENVS+"/R3.6_env.yml"
	shell:
		"""
		Rscript {RUN_GPROFILER2} {input.gene_set} {input.background} {input.annot} {output}
		"""


#HEADER of gprofiler output
# 1	query
# 2	significant
# 3	p_value
# 4	term_size
# 5	query_size
# 6	intersection_size
# 7	precision
# 8	recall
# 9	term_id
# 10	source
# 11	term_name
# 12	effective_domain_size


#rule gprofiler2_plot_input_by_species:
#	input:
#		GO_ENRICHMENTS+"/gprofiler2_output/{category}/{species}-enriched_categories-{bg_type}.tab"
#	output:
#		GO_ENRICHMENTS+"/gprofiler2_output/{category}/{species}-GO_enrichment_plot_input-{bg_type}.tab"
#	shell:
#		"""
#		echo -e "Species\tGO_category\tSignificance\tPvalue\tPrecision\tObserved\tExpected\tObservedVsExpected" > {output}; \
#		cat {input} | grep -v "term_id" | awk -v OFS="\t" '{{print $10,$11,$2,$3,$7,$6, $5*($4/$12), $6/($5*($4/$12))}}' \
#		| sed 's/-transferred_GO-reduced//' >> {output}
#		"""
