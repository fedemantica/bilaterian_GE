########## config file #########
configfile: "config.yaml"

########## paths ###############
SRC = config["general_paths"]["src"]
CONDA_ENVS = config["general_paths"]["conda_envs"]
BROCCOLI = config["paths"]["broccoli"]
DATABASE = config["paths"]["database"]
GENE_SETS_DIR = config["paths"]["gene_sets_dir"]
EXPR_TABLE_DIR = config["paths"]["expr_tables_dir"]

########## variables ###########
ALL_SPECIES = config["variables"]["all_species"]
BILATERIA = ALL_SPECIES
VERTEBRATA = config["variables"]["vertebrata"]
INSECTA = config["variables"]["insecta"]
DEUTEROSTOMA = config["variables"]["deuterostoma"]
PROTOSTOMA = config["variables"]["protostoma"]
MY_VERSION = config["variables"]["my_version"]
CATEGORIES = config["variables"]["categories"]
CLADES = config["variables"]["clades"]
EVO_TYPES = config["variables"]["evo_types"]
SUB_CLADES_DICT = config["variables"]["sub_clades_dict"]
MAX_GENES = config["variables"]["max_genes"]
MAX_PROPORTION = config["variables"]["max_proportion"]

CLADE_SPECIES_DICT = {}
CLADE_SPECIES_DICT["Vertebrata"] = VERTEBRATA
CLADE_SPECIES_DICT["Insecta"] = INSECTA
CLADE_SPECIES_DICT["Bilateria"] = BILATERIA

#Generate species combinations
import itertools
ALL_SPECIES.sort()
SPECIES_COMBS = [element[0]+"_"+element[1] for element in list(itertools.combinations(ALL_SPECIES, 2))]

ALL_TISSUES = config["variables"]["all_tissues"]
EXPR_FILE_SUFFIX = config["variables"]["expr_file_suffix"]
EXPR_FILE_SUFFIX_COR = config["variables"]["expr_file_suffix_cor"]
MIN_EXPR = config["variables"]["min_expr"]

######### tools ################
FILTER_BY_MIN_EXPR = config["tools"]["filter_by_min_expr"]
RECLUSTER_ORTHOGROUPS = config["tools"]["recluster_orthogroups"]
COMPUTE_SEQ_SIMILARITY = config["tools"]["compute_seq_similarity"]
MAFFT = config["tools"]["mafft"] 
FILTER_ORTHOGROUPS = config["tools"]["filter_orthogroups"]
COMPUTE_EXPR_COR = config["tools"]["compute_expr_cor"]
GET_AVG_EXPR_COR = config["tools"]["get_avg_expr_cor"]
SELECT_BEST_HITS = config["tools"]["select_best_hits"]
COMPUTE_EXPR_COR_SPEARMAN = config["tools"]["compute_expr_cor_spearman"]

########## targets #############
FILTERED_ORTHOGROUPS = expand("{path}/{my_version}/corrected_orthogroups-filtered.txt", path=BROCCOLI, my_version=MY_VERSION)
CLADE_OG_ALL_GENES = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}_orthogroups-ALL_genes.txt", path=GENE_SETS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade=CLADES, evo_type=EVO_TYPES)
GET_BATCH_NUMBER = expand("{path}/{my_version}/orthogroups_batches/batches_number.txt", path=GENE_SETS_DIR, my_version=MY_VERSION)
ALL_SEQUENCE_SIMILARITIES = expand("{path}/{my_version}/sequence_similarity/all_pairwise_sequence_similarities.txt", path=GENE_SETS_DIR, my_version=MY_VERSION)
ALL_EXPR_CORRELATIONS = expand("{path}/{my_version}/expression_correlations/all_pairwise_expression_correlations.txt", path=GENE_SETS_DIR, my_version=MY_VERSION)
RECLUSTERED_OG = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-reclustered_orthogroups-ALL_genes.txt", path=GENE_SETS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade=CLADES, evo_type=EVO_TYPES)
BEST_HITS_ORTHOGROUPS_CONS = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-reclustered_orthogroups-BH_genes.txt", path=GENE_SETS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade=CLADES, evo_type=EVO_TYPES)
BEST_HITS_ORTHOGROUPS_SPEC = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-reclustered_orthogroups-BH_genes.txt", path=GENE_SETS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade=["Vertebrata", "Insecta"], evo_type="specific")
SINGLE_COPY_ORTH_ORTHOGROUPS = expand("{path}/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}_orthogroups-SCO_genes.txt", path=GENE_SETS_DIR, my_version=MY_VERSION, category=CATEGORIES, clade=CLADES, evo_type=EVO_TYPES)

SINGLE_COPY_ORTH_CLASS = expand("{path}/{my_version}/{category}/Bilateria/{evo_type}/Bilateria-single_copy_orthologs_classification.txt", path=GENE_SETS_DIR, my_version=MY_VERSION, category=CATEGORIES, evo_type=EVO_TYPES)
ALL_EXPR_CORRELATIONS_SPEARMAN = expand("{path}/{my_version}/expression_correlations_spearman/all_pairwise_expression_correlations.txt", path=GENE_SETS_DIR, my_version=MY_VERSION)
######### rules ################

rule all:
	input:
		ALL_EXPR_CORRELATIONS_SPEARMAN
		#FILTERED_ORTHOGROUPS,
		#CLADE_OG_ALL_GENES,
		#GET_BATCH_NUMBER,
		#RECLUSTERED_OG,
		#ALL_SEQUENCE_SIMILARITIES,
		#ALL_EXPR_CORRELATIONS,
		#BEST_HITS_ORTHOGROUPS_CONS,
		#BEST_HITS_ORTHOGROUPS_SPEC,
		#SINGLE_COPY_ORTH_ORTHOGROUPS
		#SINGLE_COPY_ORTH_CLASS

################################################
######### FILTER ORTHOGROUPS ###################
################################################

#Consider only orthogroups with <= 80 genes or less than 120 genes where none of the speciesâ€™ genes represent more than 20% of the gene orthogroup.
#Start from the enriched orthogroups
rule filter_orthogroups:
	input:
		BROCCOLI+"/{my_version}/corrected_and_enriched_orthogroups.txt"
	output:
		BROCCOLI+"/{my_version}/corrected_orthogroups-filtered.txt"
	shell:
		"""
		python {FILTER_ORTHOGROUPS} 	--input {input} \
						--max_genes {MAX_GENES} \
						--max_proportion {MAX_PROPORTION} \
						--output {output}
		"""

################################################
######### EVO CLASSIFICATION  ##################
################################################
#These rules classify the gene orthogroups based on the species present.
#In the STRICT approach, the OG is assigned to the LCA of all represented species only when enough support is present. Otherwise, the OG is not_classified.
#NB: Only Bilateria, Vertebrata and Insecta are considered in this classification.

rule evo_classification_STRICT:
	input:
		BROCCOLI+"/{my_version}/corrected_orthogroups-filtered.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/STRICT/orthogroups_evo_classification.txt"
	run:
		import pandas as pd
		import collections
		
		orthogroups_df = pd.read_table(str(input), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		grouped_orthogroup_df = orthogroups_df.groupby("OG_ID")
		final_df = pd.DataFrame()
		for OG_ID, group in grouped_orthogroup_df:
		  species_list = list(set(list(group["Species"])))
		  if all(species in VERTEBRATA for species in species_list):
		    if len(species_list) >= 6: #conserved in at least 6 Vertebrates
		      evo_class = "Vertebrata"
		    else:
		      evo_class = "not_classified"
		  elif all(species in DEUTEROSTOMA for species in species_list):		  
		    if "Bla" in species_list and "Spu" in species_list and len(species_list) >= 8: #conserved in Bla, Spu and at least 6 Vertebrates
		      evo_class = "Deuterostoma"
		    else:
		      evo_class = "not_classified"
		  elif all(species in INSECTA for species in species_list):
		    if len(species_list) >= 6: #conserved in at least 6 Insects
		      evo_class = "Insecta"
		    else:
		      evo_class = "not_classified"
		  elif all(species in PROTOSTOMA for species in species_list):
		    if "Obi" in species_list and "Sma" in species_list and len(species_list) >= 8: #conserved in Obi, Sma and at least 6 Insects
		      evo_class = "Protostoma"
		    else:
		      evo_class = "not_classified"
		  elif len(species_list) >= 12: #conserved in at least 12 Species
		    evo_class = "Bilateria"
		  else:
		    evo_class = "not_classified"
		  final_df = pd.concat([final_df, pd.DataFrame({"OG_ID" : [OG_ID], "Evo_class" : [evo_class]})])
		#Save to output file
		final_df.to_csv(str(output), sep="\t", index=False, header=False, na_rep="NA")


##Here it's where I should make the distinction between clade-conserved and clade-specific
##Clade conserved: all the orthogroups conserved in that clade (Vertebrata, Insecta, Bilateria).
##The two following steps were only necessary when considering also the Vertebrata and Insecta orthologies.
##It is redundant when we limit the analysis to the bilaterian conserved genes, but I kept the code anyways.

rule get_clade_conserved_orthogroups:
	input:
		orthogroups = BROCCOLI+"/{my_version}/corrected_orthogroups-filtered.txt",
		evo_classification = GENE_SETS_DIR+"/{my_version}/{category}/orthogroups_evo_classification.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/{category}/{clade}/conserved/{clade}_conserved_orthogroups-ALL_genes.txt"
	params:
		sub_clades = lambda wildcards: SUB_CLADES_DICT[wildcards.clade]
	run:
		import pandas as pd
		orthogroup_df = pd.read_table(str(input.orthogroups), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		evo_classes_df = pd.read_table(str(input.evo_classification), sep="\t", header=None, names=["OG_ID", "Evo_class"])
		#Filter by allowed clades
		conserved_OG_ID = list(evo_classes_df.loc[evo_classes_df["Evo_class"].isin(params.sub_clades)]["OG_ID"])
		filtered_orthogroup_df = orthogroup_df.loc[orthogroup_df["OG_ID"].isin(conserved_OG_ID)]
		#Save to output
		filtered_orthogroup_df.to_csv(str(output), sep="\t", index=False, header=False, na_rep="NA")


#Since I am using only the bilaterian genes, the reclustering step is not needed.
###############################################
######## RECLUSTERING  ########################
###############################################
#I am going to derive the reclustered gene orthogroups for Vertebrates and Insects.
#The Vertebrates orthogroups will be all the ones classified as: Bilateria + Deuterostoma + Vertebrata
#The Insects orthogroups will be all the ones classified as: Bilateria + Protostoma + Insecta
#I am not reclustering the Bilaterian genes, but it is to use the same pipeline.
rule recluster_orthogroups:
	input:
		orthogroups = GENE_SETS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}_orthogroups-ALL_genes.txt",
		formatted_orthopairs = BROCCOLI+"/{my_version}/formatted_orthopairs.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-reclustered_orthogroups-ALL_genes.txt"
	params:
		clade_species = lambda wildcards: ",".join(CLADE_SPECIES_DICT[wildcards.clade])
	shell:
		"""
		if [[ "{wildcards.clade}" == "Bilateria" ]]; then \
			cat {input.orthogroups} > {output}; \
		else \
			python {RECLUSTER_ORTHOGROUPS} 	--orthogroups {input.orthogroups} \
						--orthopairs {input.formatted_orthopairs} \
						--clade_species "{params.clade_species}" \
						--output {output}; \
		fi; 
		"""



###############################################
######### FILTER BY MIN EXPRESSION #############
################################################
#Filter by minimum expression.
#If the maximum expression of a gene across tissues is either NA or <= 1 TPM, remove the gene (unless it is the only gene left for that species)

rule filter_by_min_expr:
	input:
		GENE_SETS_DIR+"/{my_version}/{category}/Bilateria/conserved/Bilateria_conserved_orthogroups-ALL_genes.txt"
	output:
		orthogroups = GENE_SETS_DIR+"/{my_version}/{category}/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt",
		lowly_expressed = GENE_SETS_DIR+"/{my_version}/{category}/Bilateria/conserved/Bilateria_conserved-saved_lowly_expr_genes.txt",
		removed_genes = GENE_SETS_DIR+"/{my_version}/{category}/Bilateria/conserved/Bilateria_conserved-removed_genes.txt"
	params:
		expr_table_dir = EXPR_TABLE_DIR,
		expr_file_suffix = EXPR_FILE_SUFFIX,
		species = ",".join(ALL_SPECIES),
		min_expr = MIN_EXPR #TPM
	shell:
		"""
		python {FILTER_BY_MIN_EXPR}	--orthogroups {input} \
						--expr_table_dir {params.expr_table_dir} \
						--expr_file_suffix="{params.expr_file_suffix}" \
						--clade_species {params.species} \
						--min_expr {params.min_expr} \
						--output_orthogroups {output.orthogroups} \
						--output_lowly_expressed {output.lowly_expressed} \
						--output_removed_genes {output.removed_genes}
		"""


################################################
######### BEST HITS SELECTION  #################
################################################
rule split_orthogroups:
	input:
		GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt"
		#orthogroups = BROCCOLI+"/{my_version}/corrected_orthogroups-filtered.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/orthogroups_batches/orthogroups_batch_1.txt"
	params:
		output_dir = GENE_SETS_DIR+"/{my_version}/orthogroups_batches"
	run:
		import pandas as pd

		OG_df = pd.read_table(str(input), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		OG_ID_list = list(set(list(OG_df["OG_ID"]))) #Get a list of all OG_IDs
		OG_ID_list.sort() #Order list, so that the batches will be comparable between runs.
		element_num = 10
		OG_ID_batches = [OG_ID_list[i:i+element_num] for i in range(0, len(OG_ID_list), element_num)]#Create batches of 10 orthogroups
		group_num = 1
		for batch in OG_ID_batches:
		  batch_df = OG_df.loc[OG_df["OG_ID"].isin(batch)]
		  batch_df.to_csv(params.output_dir+"/orthogroups_batch_"+str(group_num)+".txt", sep="\t", index=False, header=False, na_rep="NA")
		  group_num = group_num + 1

rule get_batch_number:
	input:
		GENE_SETS_DIR+"/{my_version}/orthogroups_batches/orthogroups_batch_1.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/orthogroups_batches/batches_number.txt"
	params:
		output_dir = GENE_SETS_DIR+"/{my_version}/orthogroups_batches"
	shell:
		"""
		ls {params.output_dir} | grep orthogroups_batch | wc -l > {output}
		"""

#Count batches number and get a list of all batches
import os.path
BATCHES_FILE = GENE_SETS_DIR+"/"+MY_VERSION+"/orthogroups_batches/batches_number.txt"
if os.path.isfile(BATCHES_FILE):
  with open(BATCHES_FILE) as f:
    TOT_BATCHES = int(f.readline().strip())
    BATCH_NUMBER = list(range(1, TOT_BATCHES+1))
else:
  BATCH_NUMBER = 1

#This rule I will run only once starting from the general orthogroups
rule compute_pairwise_seq_similarities:
	input:
		orthogroups = GENE_SETS_DIR+"/{my_version}/orthogroups_batches/orthogroups_batch_{batch_number}.txt",
		score_matrix = SRC+"/snakemake/2_GENE_ORTHOLOGIES_AND_SETS/downloaded/raw_sim_scores.tab"
	output:
		stats = GENE_SETS_DIR+"/{my_version}/sequence_similarity/batch_{batch_number}/batch_{batch_number}-stats.txt",
		sim_scores = GENE_SETS_DIR+"/{my_version}/sequence_similarity/batch_{batch_number}/batch_{batch_number}-sim_scores.tab"
	params:
		input_fastas = BROCCOLI+"/{my_version}/corrected_fastas",
		output_dir = GENE_SETS_DIR+"/{my_version}/sequence_similarity/batch_{batch_number}"
	shell:
		"""
		rm -fr {params.output_dir}/*; \
		for OG_ID in $(cat {input.orthogroups} | cut -f1 | sort | uniq); do \
			cat {input.orthogroups} | awk -v orthogroup=$OG_ID '$1==orthogroup' > {params.output_dir}/orthogroups_input.tmp; \
			python {COMPUTE_SEQ_SIMILARITY}	--orthogroups {params.output_dir}/orthogroups_input.tmp \
							--OG_ID $OG_ID \
							--input_fastas {params.input_fastas} \
							--gap_penalty 0 \
							--mafft {MAFFT} \
							--score_matrix {input.score_matrix} \
							--output {params.output_dir}; \
			rm {params.output_dir}/orthogroups_input.tmp; done; \
		echo "All orthogroups in batch were processed" > {output.stats}
		cat {params.output_dir}/*-all_sim_scores > {output.sim_scores}
		"""

rule join_pairwise_seq_similarities:
	input:
		#expand("{path}/{{my_version}}/sequence_similarity/batch_{batch_number}/batch_{batch_number}-sim_scores.tab", path=GENE_SETS_DIR, batch_number=[element for element in BATCH_NUMBER])
		expand("{path}/{{my_version}}/sequence_similarity/batch_{batch_number}/batch_{batch_number}-sim_scores.tab", path=GENE_SETS_DIR, batch_number=BATCH_NUMBER)
	output:
		GENE_SETS_DIR+"/{my_version}/sequence_similarity/all_pairwise_sequence_similarities.txt"
	params:
		input_dir = GENE_SETS_DIR+"/{my_version}/sequence_similarity"
	shell:
		"""
		cat {params.input_dir}/batch_*/batch_*-sim_scores.tab > {output}
		"""

#Get the average expression correlations
#NB: the measure here refers to the measure used to derive the tissue expression value of each gene in each species.
#It can be either "average": the tissue expression value is the average of the samples expression values
#Or "median": the tissue expression value is the median of the samples expression values.
rule compute_pairwise_expr_correlations:
	input:
		orthogroups = GENE_SETS_DIR+"/{my_version}/orthogroups_batches/orthogroups_batch_{batch_number}.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/expression_correlations/batch_{batch_number}-expression_correlations.tab"
	params:
		expr_table_dir = EXPR_TABLE_DIR,
		expr_file_suffix = EXPR_FILE_SUFFIX_COR,
		clade_species = ",".join(ALL_SPECIES),
		tissues = ",".join(ALL_TISSUES),
	shell:
		"""
		python {COMPUTE_EXPR_COR}	--orthogroups {input.orthogroups} \
						--expr_table_dir {params.expr_table_dir} \
						--expr_file_suffix="{params.expr_file_suffix}" \
						--clade_species "{params.clade_species}" \
						--tissues "{params.tissues}" \
						--output {output}
		"""

rule join_pairwise_expr_correlations:
	input:
		expand("{path}/{{my_version}}/expression_correlations/batch_{batch_number}-expression_correlations.tab", path=GENE_SETS_DIR, batch_number=BATCH_NUMBER)
	output:
		GENE_SETS_DIR+"/{my_version}/expression_correlations/all_pairwise_expression_correlations.txt"
	params:
		input_dir = GENE_SETS_DIR+"/{my_version}/expression_correlations"
	shell:
		"""
		cat {params.input_dir}/batch_*-expression_correlations.tab > {output}	
		"""


#All the inputs have the pairwise seq similarities or the pairwise expression correlations.
rule get_best_hits_orthogroups:
	input:
		orthogroup = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt",
		seq_sim = GENE_SETS_DIR+"/{my_version}/sequence_similarity/all_pairwise_sequence_similarities.txt",
		expr_cor = GENE_SETS_DIR+"/{my_version}/expression_correlations/all_pairwise_expression_correlations.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved-reclustered_orthogroups-BH_genes.txt"
	shell:
		"""
		python {SELECT_BEST_HITS}	--orthogroups {input.orthogroup} \
						--seq_sim {input.seq_sim} \
						--expr_cor {input.expr_cor} \
						--output {output} 
		"""


#############################################
###### SPEARMAN CORRELATIONS ################
#############################################

rule compute_pairwise_expr_correlations_spearman:
	input:
		orthogroups = GENE_SETS_DIR+"/{my_version}/orthogroups_batches/orthogroups_batch_{batch_number}.txt"
	output:
		GENE_SETS_DIR+"/{my_version}/expression_correlations_spearman/batch_{batch_number}-expression_correlations.tab"
	params:
		expr_table_dir = EXPR_TABLE_DIR,
		expr_file_suffix = EXPR_FILE_SUFFIX_COR,
		clade_species = ",".join(ALL_SPECIES),
		tissues = ",".join(ALL_TISSUES),
	shell:
		"""
		python {COMPUTE_EXPR_COR_SPEARMAN}	--orthogroups {input.orthogroups} \
							--expr_table_dir {params.expr_table_dir} \
							--expr_file_suffix="{params.expr_file_suffix}" \
							--clade_species "{params.clade_species}" \
							--tissues "{params.tissues}" \
							--output {output}
		"""

rule join_pairwise_expr_correlations_spearman:
	input:
		expand("{path}/{{my_version}}/expression_correlations_spearman/batch_{batch_number}-expression_correlations.tab", path=GENE_SETS_DIR, batch_number=BATCH_NUMBER)
	output:
		GENE_SETS_DIR+"/{my_version}/expression_correlations_spearman/all_pairwise_expression_correlations.txt"
	params:
		input_dir = GENE_SETS_DIR+"/{my_version}/expression_correlations_spearman"
	shell:
		"""
		cat {params.input_dir}/batch_*-expression_correlations.tab > {output}	
		"""
