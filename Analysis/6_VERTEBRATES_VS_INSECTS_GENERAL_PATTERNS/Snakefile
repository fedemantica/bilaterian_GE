configfile: "config.yaml"

###### paths ###############
DATA = config["general_paths"]["data"]
SRC = config["general_paths"]["src"]
CONDA_ENVS = config["general_paths"]["conda_envs"]
METADATA = config["paths"]["metadata"]
DATABASE = config["paths"]["database"]
GENE_SETS_DIR = config["paths"]["gene_sets_dir"]
PCA_ANALYSIS_DIR = config["paths"]["pca_analysis"]
SPLSDA_ANALYSIS_DIR = config["paths"]["splsda_analysis"]
BRANCHES_LENGTH_DIR = config["paths"]["branches_length_dir"]
GENERAL_PATTERNS = config["paths"]["general_patterns"]
GO_TRANSFERS = config["paths"]["go_transfers"]

######## tools ############
RSCRIPT = config["tools"]["rscript"]
RUN_GPROFILER2 = config["tools"]["run_gprofiler2"]
PLOT_BRANCHES_LENGTH = config["tools"]["plot_branches_length"]
PLOT_BRANCHES_LENGTH_COMPLETE = config["tools"]["plot_branches_length_complete"]

###### variables ###########
MY_VERSION = config["variables"]["my_version"]
ALL_SPECIES = config["variables"]["all_species"]
BILATERIA = ALL_SPECIES
VERTEBRATA = config["variables"]["vertebrata"]
INSECTA = config["variables"]["insecta"]
DEUTEROSTOMA = config["variables"]["deuterostoma"]
PROTOSTOMA = config["variables"]["protostoma"]
CLADES = config["variables"]["clades"]

CLADE_SPECIES_DICT = {}
CLADE_SPECIES_DICT["Vertebrata"] = VERTEBRATA
CLADE_SPECIES_DICT["Insecta"] = INSECTA
CLADE_SPECIES_DICT["Bilateria"] = BILATERIA

CATEGORIES = config["variables"]["categories"]
EVO_TYPES = config["variables"]["evo_types"]
EXPR_TYPES = config["variables"]["expr_types"]
ALL_TISSUES = config["variables"]["all_tissues"]

HIGHER_GO_CUTOFF = config["variables"]["higher_GO_cutoff"]
LOWER_GO_CUTOFF =  config["variables"]["lower_GO_cutoff"]
EXPR_SUFFIX = config["variables"]["expr_suffix"]
REDUCED_EXPR_SUFFIX = config["variables"]["reduced_expr_suffix"]

MY_MEASURES = config["variables"]["my_measures"]
GO_CATEGORIES = config["variables"]["go_categories"]

###### targets ##########
BRANCHES_LENGTH_PLOT = expand("{path}/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved-tissue_average_expr-"+REDUCED_EXPR_SUFFIX+"-branches_length.pdf", path=BRANCHES_LENGTH_DIR, my_version=MY_VERSION)
BRANCHES_LENGTH_COMPLETE_PLOT = expand("{path}/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved-tissue_average_expr-"+REDUCED_EXPR_SUFFIX+"-branches_length-complete.pdf", path=BRANCHES_LENGTH_DIR, my_version=MY_VERSION)
MEASURES_DELTAS = expand("{path}/{my_version}/{my_measure}_by_clade-{gene_type}_genes.tab", path=GENERAL_PATTERNS, my_version=MY_VERSION, my_measure=MY_MEASURES, gene_type=["EXPR", "BH"])
SPEARMAN_POST_NORM = expand("{path}/{my_version}/expression_correlations_spearman_by_clade-BH_genes-NORM.tab", path=GENERAL_PATTERNS, my_version=MY_VERSION)
GO_ENRICHMENT_RESULTS = expand("{path}/{my_version}/GO_enrichments/{category}-orthogroups_from_{species}-GO_res.tab", path=GENERAL_PATTERNS, my_version=MY_VERSION, category=GO_CATEGORIES, species="Hs2")
SPECIES_WITH_DUP_COUNTS = expand("{path}/{my_version}/duplications_analysis/{category}-species_with_duplications_counts.tab", path=GENERAL_PATTERNS, my_version=MY_VERSION, category=GO_CATEGORIES+["Background"])
SPECIES_WITH_DUP_COUNTS_ALL_SPECIES_OGS = expand("{path}/{my_version}/duplications_analysis/{category}-species_with_duplications_counts-all_species_OGs.tab", path=GENERAL_PATTERNS, my_version=MY_VERSION, category=GO_CATEGORIES+["Background"])
PHENOTYPE_ASSOCIATION = expand("{path}/{my_version}/phenotype_overlap/all_species-{category}-phenotype_conservation_labels.txt", path=GENERAL_PATTERNS, my_version=MY_VERSION, category=GO_CATEGORIES)


####### rules ############
rule all:	
	input:
		GO_ENRICHMENTS_MODIFIED_SETS

#######################################
###### Get branches length ############
#######################################

rule plot_branches_lenght:
	input:
		PCA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-tissue_average_expr"+EXPR_SUFFIX,
	output:
		branches_lenght_vertebrata = BRANCHES_LENGTH_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-tissue_average_expr-"+REDUCED_EXPR_SUFFIX+"-total_tree_lengths_bytissue-Vertebrata.txt",
		branches_lenght_insecta = BRANCHES_LENGTH_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-tissue_average_expr-"+REDUCED_EXPR_SUFFIX+"-total_tree_lengths_bytissue-Insecta.txt",
		plot = BRANCHES_LENGTH_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-tissue_average_expr-"+REDUCED_EXPR_SUFFIX+"-branches_length.pdf"
	params:
		tissues = ",".join(ALL_TISSUES),
		species = ",".join(ALL_SPECIES)
	conda:
		 CONDA_ENVS+"/r_env.yml"
	shell:
		"""
		Rscript {PLOT_BRANCHES_LENGTH}	{input} \
						{wildcards.clade} \
						{params.tissues} \
						{params.species} \
						{output.branches_lenght_vertebrata} \
						{output.branches_lenght_insecta} \
						{output.plot}
		"""

rule plot_branches_length_complete:
	input:
		PCA_ANALYSIS_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-tissue_average_expr"+EXPR_SUFFIX,
	output:
		branches_lenght = BRANCHES_LENGTH_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-tissue_average_expr-"+REDUCED_EXPR_SUFFIX+"-total_tree_lengths_bytissue-complete.txt",
		plot = BRANCHES_LENGTH_DIR+"/{my_version}/{category}/{clade}/{evo_type}/{clade}_{evo_type}-tissue_average_expr-"+REDUCED_EXPR_SUFFIX+"-branches_length-complete.pdf"
	params:
		tissues = ",".join(ALL_TISSUES),
		species = ",".join(ALL_SPECIES)
	conda:
		 CONDA_ENVS+"/r_env.yml"
	shell:
		"""
		Rscript {PLOT_BRANCHES_LENGTH_COMPLETE}	{input} \
							{wildcards.clade} \
							{params.tissues} \
							{params.species} \
							{output.branches_lenght} \
							{output.plot}
		"""




#######################################
###### EXPR COR BY ORTHOGROUP #########
#######################################

rule compute_expr_cor_by_OG:
	input:
		PCA_ANALYSIS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved-tissue_average_expr"+EXPR_SUFFIX
	output:
		GENERAL_PATTERNS+"/{my_version}/expression_correlations_spearman_by_clade-BH_genes-NORM.tab"	
	params:
		tissues = ALL_TISSUES,
		vertebrata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		import itertools
		import re

		tissues = params.tissues
		#Read input table
		input_df = pd.read_table(str(input), header=0, index_col=0, sep="\t")
		all_vertebrate_pairs = list(itertools.combinations(params.vertebrata, 2)) 
		all_insect_pairs = list(itertools.combinations(params.insecta, 2))
		#Initialize vertebrate final dataframe
		vertebrate_final_df = pd.DataFrame()
		#Get vertebrate correlations
		for species_pair in all_vertebrate_pairs:
		  #Isolate species
		  species1 = species_pair[0]
		  species2 = species_pair[1]
		  #Generate species dataframes
		  species1_df = input_df[[col for col in list(input_df.columns.values) if species1 in col]]
		  species2_df = input_df[[col for col in list(input_df.columns.values) if species2 in col]]
		  #Order columns
		  species1_df.columns = [re.sub(".*_", "", element) for element in list(species1_df.columns.values)]
		  species2_df.columns = [re.sub(".*_", "", element) for element in list(species2_df.columns.values)]
		  if species1=="Cmi" or species2=="Cmi":
		    species1_df = species1_df[[tissue for tissue in tissues if tissue != "Adipose"]]
		    species2_df = species2_df[[tissue for tissue in tissues if tissue != "Adipose"]]
		  else:
		    species1_df = species1_df[tissues]
		    species2_df = species2_df[tissues]
		  #Compute correlation
		  cor_df = species1_df.corrwith(species2_df, axis=1, method="spearman")
		  vertebrate_final_df = pd.concat([vertebrate_final_df, cor_df], axis=1)
		#Compute mean by row
		vertebrate_mean_df = vertebrate_final_df.mean(axis=1)

		#initialize insect final df
		insect_final_df = pd.DataFrame()
		for species_pair in all_insect_pairs:
		  #Isolate species
		  species1 = species_pair[0]
		  species2 = species_pair[1]
		  #Generate species dataframes
		  species1_df = input_df[[col for col in list(input_df.columns.values) if species1 in col]]
		  species2_df = input_df[[col for col in list(input_df.columns.values) if species2 in col]]
		  #Order columns
		  species1_df.columns = [re.sub(".*_", "", element) for element in list(species1_df.columns.values)]
		  species2_df.columns = [re.sub(".*_", "", element) for element in list(species2_df.columns.values)]
		  species1_df = species1_df[tissues]
		  species2_df = species2_df[tissues]
		  #Compute correlation
		  cor_df = species1_df.corrwith(species2_df, axis=1, method="spearman")
		  insect_final_df = pd.concat([insect_final_df, cor_df], axis=1)
		#Compute mean by row
		insect_mean_df = insect_final_df.mean(axis=1)
		#Combine dataframes
		combined_df = pd.concat([vertebrate_mean_df, insect_mean_df], axis=1)
		combined_df.columns = ["expression_correlations_spearman_vertebrata", "expression_correlations_spearman_insecta"]
		combined_df["expression_correlations_spearman_delta"] = combined_df["expression_correlations_spearman_vertebrata"] - combined_df["expression_correlations_spearman_insecta"]
		combined_df.index.name = "OG_ID"
		#Save to output
		combined_df.to_csv(str(output), sep="\t", header=True, index=True, na_rep="NA")


#######################################
###### SEQ SIM VS EXPR COR ############
#######################################


rule compute_average_measure_BH:
	input:
		best_hits = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved-reclustered_orthogroups-BH_genes.txt",
		measure_file = GENE_SETS_DIR+"/{my_version}/{my_measure}/all_pairwise_{my_measure}.txt"
	output:
		GENERAL_PATTERNS+"/{my_version}/{my_measure}_by_clade-BH_genes.tab"
	params:
		vertebrata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		import re

		#Read input
		best_hits_df = pd.read_table(str(input.best_hits), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		BH_genes = list(best_hits_df["GeneID"])
		measure_df = pd.read_table(str(input.measure_file), sep="\t", index_col=False, header=None, names=["OG_ID", "Species1", "Species2", "GeneID1", "GeneID2", str(wildcards.my_measure)])
		#Filter only for BH genes
		measure_BH_df = measure_df.loc[(measure_df["GeneID1"].isin(BH_genes)) & (measure_df["GeneID2"].isin(BH_genes))]
		#Filter only for Vertebrate species
		measure_BH_vertebrate_df = measure_BH_df.loc[(measure_BH_df["Species1"].isin(params.vertebrata)) & (measure_BH_df["Species2"].isin(params.vertebrata))]
		#Groupby OG_ID and compute average (I have each value repeated twice, but is should not matter)
		measure_BH_vertebrate_mean_df = measure_BH_vertebrate_df[["OG_ID", str(wildcards.my_measure)]].groupby("OG_ID").mean()
		measure_BH_vertebrate_mean_df = measure_BH_vertebrate_mean_df.rename(columns={str(wildcards.my_measure) : str(wildcards.my_measure)+"_vertebrata"})
		#Filter only for Insect species
		measure_BH_insect_df = measure_BH_df.loc[(measure_BH_df["Species1"].isin(params.insecta)) & (measure_BH_df["Species2"].isin(params.insecta))]
		#Groupby OG_ID and compute average
		measure_BH_insect_mean_df = measure_BH_insect_df[["OG_ID", str(wildcards.my_measure)]].groupby("OG_ID").mean()
		measure_BH_insect_mean_df = measure_BH_insect_mean_df.rename(columns={str(wildcards.my_measure) : str(wildcards.my_measure)+"_insecta"})
		#Combine the two dataframes
		combined_df = pd.merge(measure_BH_vertebrate_mean_df, measure_BH_insect_mean_df, on="OG_ID")
		#Compute delta
		combined_df[str(wildcards.my_measure)+"_delta"] = combined_df[str(wildcards.my_measure)+"_vertebrata"] - combined_df[str(wildcards.my_measure)+"_insecta"]
		#Save to output
		combined_df.to_csv(str(output), sep="\t", header=True, index=True, na_rep="NA")

rule compute_average_measure_ALL:
	input:
		expr_genes = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt",
		measure_file = GENE_SETS_DIR+"/{my_version}/{my_measure}/all_pairwise_{my_measure}.txt"
	output:
		GENERAL_PATTERNS+"/{my_version}/{my_measure}_by_clade-EXPR_genes.tab"
	params:
		vertebrata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		import re

		#Read input
		all_expr_genes_df = pd.read_table(str(input.expr_genes), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		expr_genes = list(all_expr_genes_df["GeneID"])
		measure_df = pd.read_table(str(input.measure_file), sep="\t", index_col=False, header=None, names=["OG_ID", "Species1", "Species2", "GeneID1", "GeneID2", str(wildcards.my_measure)])
		#Filter only for BH genes
		measure_BH_df = measure_df.loc[(measure_df["GeneID1"].isin(expr_genes)) & (measure_df["GeneID2"].isin(expr_genes))]
		#Filter only for Vertebrate species
		measure_BH_vertebrate_df = measure_BH_df.loc[(measure_BH_df["Species1"].isin(params.vertebrata)) & (measure_BH_df["Species2"].isin(params.vertebrata))]
		#Groupby OG_ID and compute average (I have each value repeated twice, but is should not matter)
		measure_BH_vertebrate_mean_df = measure_BH_vertebrate_df[["OG_ID", str(wildcards.my_measure)]].groupby("OG_ID").mean()
		measure_BH_vertebrate_mean_df = measure_BH_vertebrate_mean_df.rename(columns={str(wildcards.my_measure) : str(wildcards.my_measure)+"_vertebrata"})
		#Filter only for Insect species
		measure_BH_insect_df = measure_BH_df.loc[(measure_BH_df["Species1"].isin(params.insecta)) & (measure_BH_df["Species2"].isin(params.insecta))]
		#Groupby OG_ID and compute average
		measure_BH_insect_mean_df = measure_BH_insect_df[["OG_ID", str(wildcards.my_measure)]].groupby("OG_ID").mean()
		measure_BH_insect_mean_df = measure_BH_insect_mean_df.rename(columns={str(wildcards.my_measure) : str(wildcards.my_measure)+"_insecta"})
		#Combine the two dataframes
		combined_df = pd.merge(measure_BH_vertebrate_mean_df, measure_BH_insect_mean_df, on="OG_ID")
		#Compute delta
		combined_df[str(wildcards.my_measure)+"_delta"] = combined_df[str(wildcards.my_measure)+"_vertebrata"] - combined_df[str(wildcards.my_measure)+"_insecta"]
		#Save to output
		combined_df.to_csv(str(output), sep="\t", header=True, index=True, na_rep="NA")

#######################################
###### GO_ENRICHMENTS  ################
#######################################

rule GO_enrichment_gprofiler2_by_orthogroup:
	input:
		gene_set = GENERAL_PATTERNS+"/{my_version}/{category}-GO_input.txt",
		background = GO_TRANSFERS+"/{my_version}/GO_backgrounds/orthogroups-GO_background.txt",
		annot = GO_TRANSFERS+"/{my_version}/GO_annot/{species}_transfers/orthogroups_from_{species}-transferred_GO-reduced.gmt"
	output:
		GENERAL_PATTERNS+"/{my_version}/GO_enrichments/{category}-orthogroups_from_{species}-GO_res.tab"
	conda:
		CONDA_ENVS+"/r_env.yml"
	shell:
		"""
		Rscript {RUN_GPROFILER2} {input.gene_set} {input.background} {input.annot} {output}
		"""


#######################################
###### DUPLICATION COUNTS #############
#######################################

#The headere of the output file is: OG_ID, number_of_species, number_of_genes_with_dup_in_number of species
rule duplication_counts_input:
	input:
		gene_set = GENERAL_PATTERNS+"/{my_version}/{category}-GO_input.txt",
		whole_orthogroups = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt"
	output:
		GENERAL_PATTERNS+"/{my_version}/duplications_analysis/{category}-species_with_duplications_counts.tab"
	params:
		verterbata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		from collections import Counter

		OG_df = pd.read_table(str(input.whole_orthogroups), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		OG_list = list(pd.read_table(str(input.gene_set), sep="\t", index_col=False, header=None, names=["OG_ID"])["OG_ID"])
		#Subset to only vertebrates or insects
		vertebrata_df = OG_df.loc[(OG_df["OG_ID"].isin(OG_list)) & (OG_df["Species"].isin(params.verterbata)),["OG_ID", "Species"]]
		insecta_df = OG_df.loc[(OG_df["OG_ID"].isin(OG_list)) & (OG_df["Species"].isin(params.insecta)), ["OG_ID", "Species"]]
		#Only select duplicated entries
		vertebrata_dup_df = vertebrata_df.loc[vertebrata_df.duplicated(keep="first")].drop_duplicates()
		insecta_dup_df = insecta_df.loc[insecta_df.duplicated(keep="first")].drop_duplicates()	
		#Count number of duplicated elements in list
		vertebrata_counts_dict = Counter(list(Counter(list(vertebrata_dup_df["OG_ID"])).values()))
		insecta_counts_dict = Counter(list(Counter(list(insecta_dup_df["OG_ID"])).values()))	
		#Add counts of genes without any duplication
		vertebrata_counts_dict[0] = len(list(set(list(vertebrata_df["OG_ID"])))) - len(list(set(list(vertebrata_dup_df["OG_ID"]))))
		insecta_counts_dict[0] = len(list(set(list(insecta_df["OG_ID"])))) - len(list(set(list(insecta_dup_df["OG_ID"]))))
		#Transform into dataframes
		vertebrata_counts_df = pd.DataFrame({"Category" : [str(wildcards.category)]*len(vertebrata_counts_dict), "Clade" : ["Vertebrata"]*len(vertebrata_counts_dict), "Species_number" : list(vertebrata_counts_dict.keys()), "Genes_duplicated_in_species" : list(vertebrata_counts_dict.values())})
		insecta_counts_df = pd.DataFrame({"Category" : [str(wildcards.category)]*len(insecta_counts_dict), "Clade" : ["Insecta"]*len(insecta_counts_dict), "Species_number" : list(insecta_counts_dict.keys()), "Genes_duplicated_in_species" : list(insecta_counts_dict.values())})
		#Join into final dataframe and save to file
		final_counts_df = pd.concat([vertebrata_counts_df, insecta_counts_df])
		final_counts_df.to_csv(str(output), sep="\t", index=False, header=True, na_rep="NA")


rule duplication_counts_background:
	input:
		whole_orthogroups = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt"
	output:
		GENERAL_PATTERNS+"/{my_version}/duplications_analysis/Background-species_with_duplications_counts.tab"
	params:
		verterbata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		from collections import Counter

		OG_df = pd.read_table(str(input.whole_orthogroups), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		#Subset to only vertebrates or insects
		vertebrata_df = OG_df.loc[OG_df["Species"].isin(params.verterbata),["OG_ID", "Species"]]
		insecta_df = OG_df.loc[OG_df["Species"].isin(params.insecta), ["OG_ID", "Species"]]
		#Only select duplicated entries
		vertebrata_dup_df = vertebrata_df.loc[vertebrata_df.duplicated(keep="first")].drop_duplicates()
		insecta_dup_df = insecta_df.loc[insecta_df.duplicated(keep="first")].drop_duplicates()	
		#Count number of duplicated elements in list
		vertebrata_counts_dict = Counter(list(Counter(list(vertebrata_dup_df["OG_ID"])).values()))
		insecta_counts_dict = Counter(list(Counter(list(insecta_dup_df["OG_ID"])).values()))	
		#Add counts of genes without any duplication
		vertebrata_counts_dict[0] = len(list(set(list(vertebrata_df["OG_ID"])))) - len(list(set(list(vertebrata_dup_df["OG_ID"]))))
		insecta_counts_dict[0] = len(list(set(list(insecta_df["OG_ID"])))) - len(list(set(list(insecta_dup_df["OG_ID"]))))
		#Transform into dataframes
		vertebrata_counts_df = pd.DataFrame({"Category" : ["Background"]*len(vertebrata_counts_dict), "Clade" : ["Vertebrata"]*len(vertebrata_counts_dict), "Species_number" : list(vertebrata_counts_dict.keys()), "Genes_duplicated_in_species" : list(vertebrata_counts_dict.values())})
		insecta_counts_df = pd.DataFrame({"Category" : ["Background"]*len(insecta_counts_dict), "Clade" : ["Insecta"]*len(insecta_counts_dict), "Species_number" : list(insecta_counts_dict.keys()), "Genes_duplicated_in_species" : list(insecta_counts_dict.values())})
		#Join into final dataframe and save to file
		final_counts_df = pd.concat([vertebrata_counts_df, insecta_counts_df])
		final_counts_df.to_csv(str(output), sep="\t", index=False, header=True, na_rep="NA")

#Count the duplications, but filtering only for the orthogroups where there is at least one gene per species.
rule duplication_counts_all_species_cons_input:
	input:
		gene_set = GENERAL_PATTERNS+"/{my_version}/{category}-GO_input.txt",
		whole_orthogroups = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt"
	output:
		GENERAL_PATTERNS+"/{my_version}/duplications_analysis/{category}-species_with_duplications_counts-all_species_OGs.tab"
	params:
		verterbata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		from collections import Counter

		OG_df = pd.read_table(str(input.whole_orthogroups), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		#Filter for OG_IDs conserved in all 20 species
		OG_ID_20_species = OG_df.loc[:,["OG_ID", "Species"]].drop_duplicates()
		all_species_counts_dict = Counter(list(OG_ID_20_species["OG_ID"]))
		selected_OGs = [key for key in list(all_species_counts_dict.keys()) if all_species_counts_dict[key]==20]
		OG_df = OG_df.loc[OG_df["OG_ID"].isin(selected_OGs)]
		OG_list = list(pd.read_table(str(input.gene_set), sep="\t", index_col=False, header=None, names=["OG_ID"])["OG_ID"])
		#Subset to only vertebrates or insects
		vertebrata_df = OG_df.loc[(OG_df["OG_ID"].isin(OG_list)) & (OG_df["Species"].isin(params.verterbata)),["OG_ID", "Species"]]
		insecta_df = OG_df.loc[(OG_df["OG_ID"].isin(OG_list)) & (OG_df["Species"].isin(params.insecta)), ["OG_ID", "Species"]]
		#Only select duplicated entries
		vertebrata_dup_df = vertebrata_df.loc[vertebrata_df.duplicated(keep="first")].drop_duplicates()
		insecta_dup_df = insecta_df.loc[insecta_df.duplicated(keep="first")].drop_duplicates()	
		#Count number of duplicated elements in list
		vertebrata_counts_dict = Counter(list(Counter(list(vertebrata_dup_df["OG_ID"])).values()))
		insecta_counts_dict = Counter(list(Counter(list(insecta_dup_df["OG_ID"])).values()))	
		#Add counts of genes without any duplication
		vertebrata_counts_dict[0] = len(list(set(list(vertebrata_df["OG_ID"])))) - len(list(set(list(vertebrata_dup_df["OG_ID"]))))
		insecta_counts_dict[0] = len(list(set(list(insecta_df["OG_ID"])))) - len(list(set(list(insecta_dup_df["OG_ID"]))))
		#Transform into dataframes
		vertebrata_counts_df = pd.DataFrame({"Category" : [str(wildcards.category)]*len(vertebrata_counts_dict), "Clade" : ["Vertebrata"]*len(vertebrata_counts_dict), "Species_number" : list(vertebrata_counts_dict.keys()), "Genes_duplicated_in_species" : list(vertebrata_counts_dict.values())})
		insecta_counts_df = pd.DataFrame({"Category" : [str(wildcards.category)]*len(insecta_counts_dict), "Clade" : ["Insecta"]*len(insecta_counts_dict), "Species_number" : list(insecta_counts_dict.keys()), "Genes_duplicated_in_species" : list(insecta_counts_dict.values())})
		#Join into final dataframe and save to file
		final_counts_df = pd.concat([vertebrata_counts_df, insecta_counts_df])
		final_counts_df.to_csv(str(output), sep="\t", index=False, header=True, na_rep="NA")

rule duplication_counts_all_species_cons_background:
	input:
		whole_orthogroups = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt"
	output:
		GENERAL_PATTERNS+"/{my_version}/duplications_analysis/Background-species_with_duplications_counts-all_species_OGs.tab"
	params:
		verterbata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		from collections import Counter

		OG_df = pd.read_table(str(input.whole_orthogroups), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		#Filter for OG_IDs conserved in all 20 species
		OG_ID_20_species = OG_df.loc[:,["OG_ID", "Species"]].drop_duplicates()
		all_species_counts_dict = Counter(list(OG_ID_20_species["OG_ID"]))
		selected_OGs = [key for key in list(all_species_counts_dict.keys()) if all_species_counts_dict[key]==20]
		OG_df = OG_df.loc[OG_df["OG_ID"].isin(selected_OGs)]
		#Subset to only vertebrates or insects
		vertebrata_df = OG_df.loc[OG_df["Species"].isin(params.verterbata),["OG_ID", "Species"]]
		insecta_df = OG_df.loc[OG_df["Species"].isin(params.insecta), ["OG_ID", "Species"]]
		#Only select duplicated entries
		vertebrata_dup_df = vertebrata_df.loc[vertebrata_df.duplicated(keep="first")].drop_duplicates()
		insecta_dup_df = insecta_df.loc[insecta_df.duplicated(keep="first")].drop_duplicates()	
		#Count number of duplicated elements in list
		vertebrata_counts_dict = Counter(list(Counter(list(vertebrata_dup_df["OG_ID"])).values()))
		insecta_counts_dict = Counter(list(Counter(list(insecta_dup_df["OG_ID"])).values()))	
		#Add counts of genes without any duplication
		vertebrata_counts_dict[0] = len(list(set(list(vertebrata_df["OG_ID"])))) - len(list(set(list(vertebrata_dup_df["OG_ID"]))))
		insecta_counts_dict[0] = len(list(set(list(insecta_df["OG_ID"])))) - len(list(set(list(insecta_dup_df["OG_ID"]))))
		#Transform into dataframes
		vertebrata_counts_df = pd.DataFrame({"Category" : ["Background"]*len(vertebrata_counts_dict), "Clade" : ["Vertebrata"]*len(vertebrata_counts_dict), "Species_number" : list(vertebrata_counts_dict.keys()), "Genes_duplicated_in_species" : list(vertebrata_counts_dict.values())})
		insecta_counts_df = pd.DataFrame({"Category" : ["Background"]*len(insecta_counts_dict), "Clade" : ["Insecta"]*len(insecta_counts_dict), "Species_number" : list(insecta_counts_dict.keys()), "Genes_duplicated_in_species" : list(insecta_counts_dict.values())})
		#Join into final dataframe and save to file
		final_counts_df = pd.concat([vertebrata_counts_df, insecta_counts_df])
		final_counts_df.to_csv(str(output), sep="\t", index=False, header=True, na_rep="NA")

#######################################
###### PHENOTYPE ASSOCIATION ##########
#######################################

rule get_phenotypes_stats:
	input:
		phenotypes = SPLSDA_ANALYSIS_DIR+"/{my_version}/STRICT/Bilateria/conserved/loadings/metasamples_median_expr/splsda_zscore_comb/phenotype_overlap/all_species-Bilateria_conserved-OG_ID-phenotypic_info.tab",
		all_orthogroups = GENE_SETS_DIR+"/{my_version}/STRICT/Bilateria/conserved/Bilateria_conserved_orthogroups-EXPR_genes.txt",
		#categories_OGs = expand("{path}/{{my_version}}/{category}-GO_input.txt", path=GENERAL_PATTERNS, category=GO_CATEGORIES),
		categories_OGs = GENERAL_PATTERNS+"/{my_version}/{category}-GO_input.txt"
	output:
		labels = GENERAL_PATTERNS+"/{my_version}/phenotype_overlap/all_species-{category}-phenotype_conservation_labels.txt",
		stats = GENERAL_PATTERNS+"/{my_version}/phenotype_overlap/all_species-{category}-phenotype_conservation_stats.txt"
	params:
		input_suffix = "-GO_input.txt"
	run:
		import pandas as pd
		import os
		import re

		#Upload phenotypes info
		phenotypes_df = pd.read_table(str(input.phenotypes), sep="\t", header=None, index_col=False, names=["OG_ID", "Species", "GeneID", "Phenotype"])
		#Remove those lines where the phenotype is viable (because it's not informative)
		phenotypes_df = phenotypes_df.loc[~(phenotypes_df["Phenotype"].str.match("viable"))]
                phenotypes_df = phenotypes_df.loc[phenotypes_df["Phenotype"]!="fertile"]
		phenotypes_df = phenotypes_df.loc[phenotypes_df["Phenotype"]!="wild_type"]
		#Upload all orthogroups info
		orthogroups_df = pd.read_table(str(input.all_orthogroups), sep="\t", header=None, index_col=False, names=["OG_ID", "Species", "GeneID"])
		all_orthogroups = list(set(list(orthogroups_df["OG_ID"])))
		#Upload info regarding to all categories
		#category_orthogroups_df = pd.DataFrame()
		#for category_file in input.categories_OGs:
		#  category = re.sub(str(params.input_suffix), "", os.path.basename(category_file))
		category_orthogroups_df = pd.read_table(input.categories_OGs, sep="\t", header=None, index_col=False, names=["OG_ID"])
		category_orthogroups_df["Category"] = str(wildcards.category)
		orthogroups_category_dict = pd.Series(category_orthogroups_df.Category.values, index=category_orthogroups_df.OG_ID).to_dict()
		category_orthogroups = list(set(list(category_orthogroups_df["OG_ID"])))
		#Subset phenotypes only by category
		phenotypes_df = phenotypes_df.loc[phenotypes_df["OG_ID"].isin(category_orthogroups)]
		#Mammals phenotypes
		mammals_phenotypes_df = phenotypes_df.loc[phenotypes_df["Species"].isin(["Hs2","Mm2"])]
		mammals_orthogroups = list(set(list(mammals_phenotypes_df["OG_ID"])))
		#Fly phenotypes
		fly_phenotypes_df = phenotypes_df.loc[phenotypes_df["Species"]=="Dme"]
		fly_orthogroups = list(set(list(fly_phenotypes_df["OG_ID"])))
		#Compute labels
		mammals_and_fly = [OG for OG in mammals_orthogroups if OG in fly_orthogroups]
		mammals_only = [OG for OG in mammals_orthogroups if OG not in fly_orthogroups]
		fly_only = [OG for OG in fly_orthogroups if OG not in mammals_orthogroups]
		neither_mammals_nor_fly = [OG for OG in category_orthogroups if OG not in fly_orthogroups and OG not in mammals_orthogroups]
		#Generate labels df
		labels_df = pd.concat([pd.DataFrame({"OG_ID" : mammals_and_fly, "Label" : ["mammals_and_fly"]*len(mammals_and_fly)}), pd.DataFrame({"OG_ID" : mammals_only, "Label" : ["mammals_only"]*len(mammals_only)}), pd.DataFrame({"OG_ID" : fly_only, "Label" : ["fly_only"]*len(fly_only)}), pd.DataFrame({"OG_ID" : neither_mammals_nor_fly, "Label" : ["neither_mammals_nor_fly"]*len(neither_mammals_nor_fly)})])
		labels_df["Category"] = labels_df["OG_ID"].map(orthogroups_category_dict)
		#Compute stats
		mammals_and_fly_counts = len(mammals_and_fly)
		mammals_only_counts = len(mammals_only)
		fly_only_counts = len(fly_only)
		neither_mammals_nor_fly = len(neither_mammals_nor_fly)
		#Generate stats df
		tot_OGs = len(category_orthogroups)
		stats_df = pd.DataFrame({"Category" : ["Mammals_and_fly", "Mammals_only", "Fly_only", "Neither_mammals_nor_fly"], "Counts" : [mammals_and_fly_counts, mammals_only_counts, fly_only_counts, neither_mammals_nor_fly], "Percentage" : [mammals_and_fly_counts/tot_OGs, mammals_only_counts/tot_OGs, fly_only_counts/tot_OGs, neither_mammals_nor_fly/tot_OGs]})
		#Save dataframes to file
		labels_df.to_csv(str(output.labels), sep="\t", header=True, index=False, na_rep="NA")
		stats_df.to_csv(str(output.stats), sep="\t", header=True, index=False, na_rep="NA")


